{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df_1 = pd.read_csv('DATASET_PEV.csv')\n",
    "df_2 = pd.read_csv('DATASET_APRES_VENTE.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (0.13.0)\n",
      "Requirement already satisfied: numpy!=1.24.0,>=1.20 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (1.26.4)\n",
      "Requirement already satisfied: pandas>=1.2 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (2.2.2)\n",
      "Requirement already satisfied: matplotlib!=3.6.1,>=3.3 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (3.8.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (4.47.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (1.4.5)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (24.1)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (10.3.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (3.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=1.2->seaborn) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=1.2->seaborn) (2024.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.3->seaborn) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Requirement already satisfied: xgboost in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (2.1.1)\n",
      "Requirement already satisfied: numpy in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from xgboost) (1.26.4)\n",
      "Requirement already satisfied: scipy in c:\\users\\lenovo gaming\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from xgboost) (1.12.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install seaborn\n",
    "%pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR</th>\n",
       "      <th>TYPE_DEFAUT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>VF1FL000971378984</td>\n",
       "      <td>BCM</td>\n",
       "      <td>CONSUMP REVERS LIGHT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>VF1FL000971378984</td>\n",
       "      <td>BCM</td>\n",
       "      <td>CONSUMP REVERS LIGHT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>VF1FL000971378984</td>\n",
       "      <td>NCA</td>\n",
       "      <td>DTC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>VF1FL000471455762</td>\n",
       "      <td>ECM</td>\n",
       "      <td>PAS REPONSE UCE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>VF1FL000471455762</td>\n",
       "      <td>ECM</td>\n",
       "      <td>CALIBRATION</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7060</th>\n",
       "      <td>7060</td>\n",
       "      <td>VF1FL000471021700</td>\n",
       "      <td>BCM</td>\n",
       "      <td>CLE NON RECONNUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7061</th>\n",
       "      <td>7061</td>\n",
       "      <td>VF1FL000471021700</td>\n",
       "      <td>BCM</td>\n",
       "      <td>DELIVERY MODE NIVEAU 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7062</th>\n",
       "      <td>7062</td>\n",
       "      <td>VF1FL000471021700</td>\n",
       "      <td>BCM</td>\n",
       "      <td>DELIVERY MODE / CUSTOMER MODE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7063</th>\n",
       "      <td>7063</td>\n",
       "      <td>VF1FL000471021700</td>\n",
       "      <td>BCM</td>\n",
       "      <td>CLE NON RECONNUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7064</th>\n",
       "      <td>7064</td>\n",
       "      <td>VF1FL000471021700</td>\n",
       "      <td>BCM</td>\n",
       "      <td>CLE NON RECONNUE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7065 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0                VIN CALCULATEUR                    TYPE_DEFAUT\n",
       "0              0  VF1FL000971378984         BCM           CONSUMP REVERS LIGHT\n",
       "1              1  VF1FL000971378984         BCM           CONSUMP REVERS LIGHT\n",
       "2              2  VF1FL000971378984         NCA                            DTC\n",
       "3              3  VF1FL000471455762         ECM                PAS REPONSE UCE\n",
       "4              4  VF1FL000471455762         ECM                    CALIBRATION\n",
       "...          ...                ...         ...                            ...\n",
       "7060        7060  VF1FL000471021700         BCM               CLE NON RECONNUE\n",
       "7061        7061  VF1FL000471021700         BCM         DELIVERY MODE NIVEAU 1\n",
       "7062        7062  VF1FL000471021700         BCM  DELIVERY MODE / CUSTOMER MODE\n",
       "7063        7063  VF1FL000471021700         BCM               CLE NON RECONNUE\n",
       "7064        7064  VF1FL000471021700         BCM               CLE NON RECONNUE\n",
       "\n",
       "[7065 rows x 4 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quick Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1_agg = df_1.groupby('VIN')['CALCULATEUR'].agg(' + '.join).reset_index()\n",
    "df_merged_CALCULATEUR = pd.merge(df_1_agg, df_2, on='VIN', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Code fonction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1FL000070076702</td>\n",
       "      <td>FRRAD + FRRAD + FRRAD</td>\n",
       "      <td>1639</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1FL000071218864</td>\n",
       "      <td>HVAC</td>\n",
       "      <td>2765</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1FL000071266722</td>\n",
       "      <td>ABS + BCM + METER + ABS + METER + METER + ABS ...</td>\n",
       "      <td>1466</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VF1FL000170962429</td>\n",
       "      <td>BCM + NAV + NAV + FRCAM + EPS + UDM + USM + US...</td>\n",
       "      <td>3605</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>VF1FL000171016292</td>\n",
       "      <td>BCM + BCM + BCM + BCM + BCM + ACU + ACU</td>\n",
       "      <td>1215</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>VF1JL000971159386</td>\n",
       "      <td>HFM + BCM + BCM</td>\n",
       "      <td>792</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>VF1JL000971249217</td>\n",
       "      <td>BCM + BCM + BCM</td>\n",
       "      <td>4045</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>VF1JL000X70838511</td>\n",
       "      <td>BCM + BCM</td>\n",
       "      <td>3550</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>VF1JL000X71317296</td>\n",
       "      <td>METER</td>\n",
       "      <td>3746</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>VF1JL000X71326564</td>\n",
       "      <td>HVAC + HVAC</td>\n",
       "      <td>2590</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>112 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                                        CALCULATEUR  \\\n",
       "2    VF1FL000070076702                              FRRAD + FRRAD + FRRAD   \n",
       "3    VF1FL000071218864                                               HVAC   \n",
       "4    VF1FL000071266722  ABS + BCM + METER + ABS + METER + METER + ABS ...   \n",
       "9    VF1FL000170962429  BCM + NAV + NAV + FRCAM + EPS + UDM + USM + US...   \n",
       "11   VF1FL000171016292            BCM + BCM + BCM + BCM + BCM + ACU + ACU   \n",
       "..                 ...                                                ...   \n",
       "204  VF1JL000971159386                                    HFM + BCM + BCM   \n",
       "205  VF1JL000971249217                                    BCM + BCM + BCM   \n",
       "206  VF1JL000X70838511                                          BCM + BCM   \n",
       "207  VF1JL000X71317296                                              METER   \n",
       "209  VF1JL000X71326564                                        HVAC + HVAC   \n",
       "\n",
       "     Unnamed: 0         Code fonction  \n",
       "2          1639  AMS96 - Electronique  \n",
       "3          2765  AMS96 - Electronique  \n",
       "4          1466  AMS96 - Electronique  \n",
       "9          3605  AMS96 - Electronique  \n",
       "11         1215  AMS96 - Electronique  \n",
       "..          ...                   ...  \n",
       "204         792  AMS96 - Electronique  \n",
       "205        4045  AMS96 - Electronique  \n",
       "206        3550  AMS96 - Electronique  \n",
       "207        3746  AMS96 - Electronique  \n",
       "209        2590  AMS96 - Electronique  \n",
       "\n",
       "[112 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merged_ams96 = df_merged_CALCULATEUR[df_merged_CALCULATEUR['Code fonction'] == 'AMS96 - Electronique']\n",
    "df_merged_ams96"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Lenovo Gaming\\AppData\\Local\\Temp\\ipykernel_5904\\1252659461.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_merged_ams96['Number of problems'] = df_merged_ams96['CALCULATEUR'].apply(lambda x: len(x.split('+')))\n",
      "C:\\Users\\Lenovo Gaming\\AppData\\Local\\Temp\\ipykernel_5904\\1252659461.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_merged_ams96['Diversity of problems'] = df_merged_ams96['CALCULATEUR'].apply(lambda x: len(set([problem.strip() for problem in x.split('+')])))\n",
      "C:\\Users\\Lenovo Gaming\\AppData\\Local\\Temp\\ipykernel_5904\\1252659461.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_merged_ams96[['Most recurrent problem', 'Most recurrent count']] = df_merged_ams96['CALCULATEUR'].apply(\n",
      "C:\\Users\\Lenovo Gaming\\AppData\\Local\\Temp\\ipykernel_5904\\1252659461.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_merged_ams96[['Most recurrent problem', 'Most recurrent count']] = df_merged_ams96['CALCULATEUR'].apply(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Code fonction</th>\n",
       "      <th>Number of problems</th>\n",
       "      <th>Diversity of problems</th>\n",
       "      <th>Most recurrent problem</th>\n",
       "      <th>Most recurrent count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1FL000070076702</td>\n",
       "      <td>FRRAD + FRRAD + FRRAD</td>\n",
       "      <td>1639</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>FRRAD</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1FL000071218864</td>\n",
       "      <td>HVAC</td>\n",
       "      <td>2765</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>HVAC</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1FL000071266722</td>\n",
       "      <td>ABS + BCM + METER + ABS + METER + METER + ABS ...</td>\n",
       "      <td>1466</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>74</td>\n",
       "      <td>7</td>\n",
       "      <td>BCM</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VF1FL000170962429</td>\n",
       "      <td>BCM + NAV + NAV + FRCAM + EPS + UDM + USM + US...</td>\n",
       "      <td>3605</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>44</td>\n",
       "      <td>8</td>\n",
       "      <td>USM</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>VF1FL000171016292</td>\n",
       "      <td>BCM + BCM + BCM + BCM + BCM + ACU + ACU</td>\n",
       "      <td>1215</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>BCM</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>VF1JL000971159386</td>\n",
       "      <td>HFM + BCM + BCM</td>\n",
       "      <td>792</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>BCM</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>VF1JL000971249217</td>\n",
       "      <td>BCM + BCM + BCM</td>\n",
       "      <td>4045</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>BCM</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>VF1JL000X70838511</td>\n",
       "      <td>BCM + BCM</td>\n",
       "      <td>3550</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>BCM</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>VF1JL000X71317296</td>\n",
       "      <td>METER</td>\n",
       "      <td>3746</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>METER</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>VF1JL000X71326564</td>\n",
       "      <td>HVAC + HVAC</td>\n",
       "      <td>2590</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>HVAC</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>112 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                                        CALCULATEUR  \\\n",
       "2    VF1FL000070076702                              FRRAD + FRRAD + FRRAD   \n",
       "3    VF1FL000071218864                                               HVAC   \n",
       "4    VF1FL000071266722  ABS + BCM + METER + ABS + METER + METER + ABS ...   \n",
       "9    VF1FL000170962429  BCM + NAV + NAV + FRCAM + EPS + UDM + USM + US...   \n",
       "11   VF1FL000171016292            BCM + BCM + BCM + BCM + BCM + ACU + ACU   \n",
       "..                 ...                                                ...   \n",
       "204  VF1JL000971159386                                    HFM + BCM + BCM   \n",
       "205  VF1JL000971249217                                    BCM + BCM + BCM   \n",
       "206  VF1JL000X70838511                                          BCM + BCM   \n",
       "207  VF1JL000X71317296                                              METER   \n",
       "209  VF1JL000X71326564                                        HVAC + HVAC   \n",
       "\n",
       "     Unnamed: 0         Code fonction  Number of problems  \\\n",
       "2          1639  AMS96 - Electronique                   3   \n",
       "3          2765  AMS96 - Electronique                   1   \n",
       "4          1466  AMS96 - Electronique                  74   \n",
       "9          3605  AMS96 - Electronique                  44   \n",
       "11         1215  AMS96 - Electronique                   7   \n",
       "..          ...                   ...                 ...   \n",
       "204         792  AMS96 - Electronique                   3   \n",
       "205        4045  AMS96 - Electronique                   3   \n",
       "206        3550  AMS96 - Electronique                   2   \n",
       "207        3746  AMS96 - Electronique                   1   \n",
       "209        2590  AMS96 - Electronique                   2   \n",
       "\n",
       "     Diversity of problems Most recurrent problem  Most recurrent count  \n",
       "2                        1                  FRRAD                     3  \n",
       "3                        1                   HVAC                     1  \n",
       "4                        7                    BCM                    25  \n",
       "9                        8                    USM                    14  \n",
       "11                       2                    BCM                     5  \n",
       "..                     ...                    ...                   ...  \n",
       "204                      2                    BCM                     2  \n",
       "205                      1                    BCM                     3  \n",
       "206                      1                    BCM                     2  \n",
       "207                      1                  METER                     1  \n",
       "209                      1                   HVAC                     2  \n",
       "\n",
       "[112 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "\n",
    "# Step 1: Create the 'Number of problems' feature\n",
    "df_merged_ams96['Number of problems'] = df_merged_ams96['CALCULATEUR'].apply(lambda x: len(x.split('+')))\n",
    "\n",
    "# Step 2: Create the 'Diversity of problems' feature\n",
    "df_merged_ams96['Diversity of problems'] = df_merged_ams96['CALCULATEUR'].apply(lambda x: len(set([problem.strip() for problem in x.split('+')])))\n",
    "\n",
    "# Step 3: Create the 'Most recurrent problem' feature\n",
    "def most_recurrent_problem(calculateur):\n",
    "    problems = [problem.strip() for problem in calculateur.split('+')]  # split and clean\n",
    "    problem_counts = Counter(problems)\n",
    "    most_common_problem = problem_counts.most_common(1)[0]  # Get the most common problem and its count\n",
    "    return most_common_problem[0], most_common_problem[1]\n",
    "\n",
    "# Apply the function and create two new columns\n",
    "df_merged_ams96[['Most recurrent problem', 'Most recurrent count']] = df_merged_ams96['CALCULATEUR'].apply(\n",
    "    lambda x: pd.Series(most_recurrent_problem(x))\n",
    ")\n",
    "\n",
    "# Display the DataFrame\n",
    "df_merged_ams96   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Obtenir les comptes de valeurs pour 'Code fonction'\n",
    "value_counts = df_merged_ams96['Most recurrent problem'].value_counts()\n",
    "\n",
    "# Tracer les comptes de 'Code fonction'\n",
    "plt.figure(figsize=(10, 8))\n",
    "value_counts.plot(kind='barh', color='skyblue')  # 'barh' pour un graphique Ã  barres horizontales\n",
    "plt.title('RÃ©partition des problÃ¨mes les plus rÃ©currents')\n",
    "plt.xlabel('Nombre')\n",
    "plt.ylabel('Code fonction')\n",
    "plt.gca().invert_yaxis()  # Inverser l'axe des y pour que les barres soient dans l'ordre dÃ©croissant\n",
    "plt.tight_layout()  # Ajuster le layout pour que tout soit bien visible\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_DETAILLE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VF1EL000071107078</td>\n",
       "      <td>USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VF1EL000071182833</td>\n",
       "      <td>BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1EL000170966766</td>\n",
       "      <td>BCM (FEU STOP) + BCM (FEU STOP)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1EL000370756198</td>\n",
       "      <td>SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1EL000371117068</td>\n",
       "      <td>ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>VNVJ4000170746812</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>VNVJ4000471449608</td>\n",
       "      <td>TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>VNVJ4000571449049</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>VNVJ4000970976808</td>\n",
       "      <td>BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>VNVJ4000X71239594</td>\n",
       "      <td>ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_DETAILLE\n",
       "0    VF1EL000071107078  USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...\n",
       "1    VF1EL000071182833  BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...\n",
       "2    VF1EL000170966766                    BCM (FEU STOP) + BCM (FEU STOP)\n",
       "3    VF1EL000370756198  SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...\n",
       "4    VF1EL000371117068  ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...\n",
       "..                 ...                                                ...\n",
       "397  VNVJ4000170746812  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...\n",
       "398  VNVJ4000471449608  TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...\n",
       "399  VNVJ4000571449049  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...\n",
       "400  VNVJ4000970976808  BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...\n",
       "401  VNVJ4000X71239594  ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...\n",
       "\n",
       "[402 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['CALCULATEUR_DETAILLE'] = df_1['CALCULATEUR'] + ' (' + df_1['TYPE_DEFAUT'] + ')'\n",
    "\n",
    "# Step 2: Group by VIN and aggregate the new detailed COMPNAME column using ' + '\n",
    "df_1_agg = df_1.groupby('VIN')['CALCULATEUR_DETAILLE'].agg(' + '.join).reset_index()\n",
    "\n",
    "# Step 3: Display the result\n",
    "df_1_agg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_DETAILLE</th>\n",
       "      <th>Code fonction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1FL000070076702</td>\n",
       "      <td>FRRAD (DTC) + FRRAD (DTC) + FRRAD (DTC)</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1FL000071218864</td>\n",
       "      <td>HVAC (DTC)</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1FL000071266722</td>\n",
       "      <td>ABS (DTC) + BCM (DEMARRAGE INTERDIT) + METER (...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VF1FL000170962429</td>\n",
       "      <td>BCM (APC NON VU) + NAV (PAS REPONSE UCE) + NAV...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>VF1FL000171016292</td>\n",
       "      <td>BCM (BADGE NON CONFORME) + BCM (BADGE NON PRES...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>VF1JL000971159386</td>\n",
       "      <td>HFM (DTC) + BCM (ECLAIRAGE PLAFONNIER AR) + BC...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>VF1JL000971249217</td>\n",
       "      <td>BCM (COMMANDE SERRURE ELEC COFFRE) + BCM (PORT...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>VF1JL000X70838511</td>\n",
       "      <td>BCM (CONSUMP REVERS LIGHT) + BCM (CONSUMP REVE...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>VF1JL000X71317296</td>\n",
       "      <td>METER (RHEOSTAT ECLAIRAGE TABLEAU DE BORD)</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>VF1JL000X71326564</td>\n",
       "      <td>HVAC (CLIM MANUELLE ARRIERE) + HVAC (CLIM MANU...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>112 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_DETAILLE  \\\n",
       "2    VF1FL000070076702            FRRAD (DTC) + FRRAD (DTC) + FRRAD (DTC)   \n",
       "3    VF1FL000071218864                                         HVAC (DTC)   \n",
       "4    VF1FL000071266722  ABS (DTC) + BCM (DEMARRAGE INTERDIT) + METER (...   \n",
       "9    VF1FL000170962429  BCM (APC NON VU) + NAV (PAS REPONSE UCE) + NAV...   \n",
       "11   VF1FL000171016292  BCM (BADGE NON CONFORME) + BCM (BADGE NON PRES...   \n",
       "..                 ...                                                ...   \n",
       "204  VF1JL000971159386  HFM (DTC) + BCM (ECLAIRAGE PLAFONNIER AR) + BC...   \n",
       "205  VF1JL000971249217  BCM (COMMANDE SERRURE ELEC COFFRE) + BCM (PORT...   \n",
       "206  VF1JL000X70838511  BCM (CONSUMP REVERS LIGHT) + BCM (CONSUMP REVE...   \n",
       "207  VF1JL000X71317296         METER (RHEOSTAT ECLAIRAGE TABLEAU DE BORD)   \n",
       "209  VF1JL000X71326564  HVAC (CLIM MANUELLE ARRIERE) + HVAC (CLIM MANU...   \n",
       "\n",
       "            Code fonction  \n",
       "2    AMS96 - Electronique  \n",
       "3    AMS96 - Electronique  \n",
       "4    AMS96 - Electronique  \n",
       "9    AMS96 - Electronique  \n",
       "11   AMS96 - Electronique  \n",
       "..                    ...  \n",
       "204  AMS96 - Electronique  \n",
       "205  AMS96 - Electronique  \n",
       "206  AMS96 - Electronique  \n",
       "207  AMS96 - Electronique  \n",
       "209  AMS96 - Electronique  \n",
       "\n",
       "[112 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merged_CALCULATEUR = pd.merge(df_1_agg, df_2, on='VIN', how='inner')\n",
    "# Filter the dataframe for rows where 'Code fonction' is 'AMS96 - Electronique'\n",
    "df_merged_ams96 = df_merged_CALCULATEUR[df_merged_CALCULATEUR['Code fonction'] == 'AMS96 - Electronique']\n",
    "columns_to_keep = ['VIN','CALCULATEUR_DETAILLE','Code fonction']\n",
    "df_merged_ams96 = df_merged_ams96[columns_to_keep]\n",
    "df_merged_ams96"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Lenovo Gaming\\AppData\\Local\\Temp\\ipykernel_5904\\3595204535.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_bcm['BCM_Nature_of_problems'] = df_bcm['CALCULATEUR_DETAILLE'].apply(extract_all_bcm_defects)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_DETAILLE</th>\n",
       "      <th>BCM_Nature_of_problems</th>\n",
       "      <th>Code fonction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1FL000071266722</td>\n",
       "      <td>ABS (DTC) + BCM (DEMARRAGE INTERDIT) + METER (...</td>\n",
       "      <td>{PEDALE EMBRAYAGE, DELIVERY MODE NIVEAU 1, FEU...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VF1FL000170962429</td>\n",
       "      <td>BCM (APC NON VU) + NAV (PAS REPONSE UCE) + NAV...</td>\n",
       "      <td>{DTC, APC NON VU}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>VF1FL000171016292</td>\n",
       "      <td>BCM (BADGE NON CONFORME) + BCM (BADGE NON PRES...</td>\n",
       "      <td>{BADGE NON CONFORME, DELIVERY MODE / CUSTOMER ...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>VF1FL000270840128</td>\n",
       "      <td>BCM (CLE NON RECONNUE) + USM (FEUX JOUR) + USM...</td>\n",
       "      <td>{CLE NON RECONNUE, DTC}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>VF1FL000271016155</td>\n",
       "      <td>BCM (RETROVISEUR COND) + BCM (RETROVISEUR PSG)...</td>\n",
       "      <td>{RETROVISEUR RABATTABLE, RETROVISEUR COND, RET...</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>VF1JL000871432768</td>\n",
       "      <td>BCM (SIEGE CHAUFFANT AV PSG)</td>\n",
       "      <td>{SIEGE CHAUFFANT AV PSG}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>VF1JL000970936624</td>\n",
       "      <td>BCM (ESSUIE-VITRE AR) + BCM (ESSUIE-VITRE AR)</td>\n",
       "      <td>{ESSUIE-VITRE AR}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>VF1JL000971159386</td>\n",
       "      <td>HFM (DTC) + BCM (ECLAIRAGE PLAFONNIER AR) + BC...</td>\n",
       "      <td>{ECLAIRAGE PLAFONNIER AR, APC NON COUPE}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>VF1JL000971249217</td>\n",
       "      <td>BCM (COMMANDE SERRURE ELEC COFFRE) + BCM (PORT...</td>\n",
       "      <td>{COMMANDE SERRURE ELEC COFFRE, PORTE COFFRE}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>VF1JL000X70838511</td>\n",
       "      <td>BCM (CONSUMP REVERS LIGHT) + BCM (CONSUMP REVE...</td>\n",
       "      <td>{CONSUMP REVERS LIGHT}</td>\n",
       "      <td>AMS96 - Electronique</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_DETAILLE  \\\n",
       "4    VF1FL000071266722  ABS (DTC) + BCM (DEMARRAGE INTERDIT) + METER (...   \n",
       "9    VF1FL000170962429  BCM (APC NON VU) + NAV (PAS REPONSE UCE) + NAV...   \n",
       "11   VF1FL000171016292  BCM (BADGE NON CONFORME) + BCM (BADGE NON PRES...   \n",
       "26   VF1FL000270840128  BCM (CLE NON RECONNUE) + USM (FEUX JOUR) + USM...   \n",
       "27   VF1FL000271016155  BCM (RETROVISEUR COND) + BCM (RETROVISEUR PSG)...   \n",
       "..                 ...                                                ...   \n",
       "201  VF1JL000871432768                       BCM (SIEGE CHAUFFANT AV PSG)   \n",
       "202  VF1JL000970936624      BCM (ESSUIE-VITRE AR) + BCM (ESSUIE-VITRE AR)   \n",
       "204  VF1JL000971159386  HFM (DTC) + BCM (ECLAIRAGE PLAFONNIER AR) + BC...   \n",
       "205  VF1JL000971249217  BCM (COMMANDE SERRURE ELEC COFFRE) + BCM (PORT...   \n",
       "206  VF1JL000X70838511  BCM (CONSUMP REVERS LIGHT) + BCM (CONSUMP REVE...   \n",
       "\n",
       "                                BCM_Nature_of_problems         Code fonction  \n",
       "4    {PEDALE EMBRAYAGE, DELIVERY MODE NIVEAU 1, FEU...  AMS96 - Electronique  \n",
       "9                                    {DTC, APC NON VU}  AMS96 - Electronique  \n",
       "11   {BADGE NON CONFORME, DELIVERY MODE / CUSTOMER ...  AMS96 - Electronique  \n",
       "26                             {CLE NON RECONNUE, DTC}  AMS96 - Electronique  \n",
       "27   {RETROVISEUR RABATTABLE, RETROVISEUR COND, RET...  AMS96 - Electronique  \n",
       "..                                                 ...                   ...  \n",
       "201                           {SIEGE CHAUFFANT AV PSG}  AMS96 - Electronique  \n",
       "202                                  {ESSUIE-VITRE AR}  AMS96 - Electronique  \n",
       "204           {ECLAIRAGE PLAFONNIER AR, APC NON COUPE}  AMS96 - Electronique  \n",
       "205       {COMMANDE SERRURE ELEC COFFRE, PORTE COFFRE}  AMS96 - Electronique  \n",
       "206                             {CONSUMP REVERS LIGHT}  AMS96 - Electronique  \n",
       "\n",
       "[67 rows x 4 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Step 1: Filter the rows where 'BCM' is detected in 'COMPNAME_DETAILED'\n",
    "df_bcm = df_merged_ams96[df_merged_ams96['CALCULATEUR_DETAILLE'].str.contains('BCM')]\n",
    "\n",
    "# Step 2: Extract all occurrences of 'BCM' followed by the text in parentheses\n",
    "def extract_all_bcm_defects(text):\n",
    "    # Regular expression to find all instances of 'BCM' followed by parentheses\n",
    "    matches = re.findall(r'BCM\\s*\\((.*?)\\)', text)\n",
    "    return set(matches) if matches else None  # Return list of matches or None if no 'BCM' found\n",
    "\n",
    "# Apply the function to extract all 'BCM' specific defect descriptions\n",
    "df_bcm['BCM_Nature_of_problems'] = df_bcm['CALCULATEUR_DETAILLE'].apply(extract_all_bcm_defects)\n",
    "\n",
    "# Step 3: Display the result (COMPNAME_DETAILED and extracted BCM-specific nature of problems)\n",
    "df_bcm[['VIN','CALCULATEUR_DETAILLE', 'BCM_Nature_of_problems', 'Code fonction']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Constructing our dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We will try to construct a dataframe with the following features : \n",
    "\n",
    "- Most recurrent problem\n",
    "- Number of occurences of BCM in CALCULATEUR\n",
    "- Number of occurences of the same BCM problem (DEFAUT_L1)\n",
    "- Ratio of BCM per total defects detected\n",
    "- Ratio of DTC in BCM\n",
    "- Ratio of DTC in total defects of the vehicule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_Detailed</th>\n",
       "      <th>Defect_Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VF1EL000071107078</td>\n",
       "      <td>USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VF1EL000071182833</td>\n",
       "      <td>BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1EL000170966766</td>\n",
       "      <td>BCM (FEU STOP) + BCM (FEU STOP)</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1EL000370756198</td>\n",
       "      <td>SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1EL000371117068</td>\n",
       "      <td>ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>VNVJ4000170746812</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>VNVJ4000471449608</td>\n",
       "      <td>TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>VNVJ4000571449049</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>VNVJ4000970976808</td>\n",
       "      <td>BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>VNVJ4000X71239594</td>\n",
       "      <td>ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_Detailed  \\\n",
       "0    VF1EL000071107078  USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...   \n",
       "1    VF1EL000071182833  BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...   \n",
       "2    VF1EL000170966766                    BCM (FEU STOP) + BCM (FEU STOP)   \n",
       "3    VF1EL000370756198  SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...   \n",
       "4    VF1EL000371117068  ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...   \n",
       "..                 ...                                                ...   \n",
       "397  VNVJ4000170746812  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "398  VNVJ4000471449608  TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...   \n",
       "399  VNVJ4000571449049  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "400  VNVJ4000970976808  BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...   \n",
       "401  VNVJ4000X71239594  ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...   \n",
       "\n",
       "     Defect_Count  \n",
       "0              19  \n",
       "1              13  \n",
       "2               2  \n",
       "3               2  \n",
       "4               4  \n",
       "..            ...  \n",
       "397            96  \n",
       "398            16  \n",
       "399           101  \n",
       "400             4  \n",
       "401            39  \n",
       "\n",
       "[402 rows x 3 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 4: Create the COMPNAME_Detailed column with the specified format\n",
    "def create_compname_detailed(row):\n",
    "    return f\"{row['CALCULATEUR']} ({row['TYPE_DEFAUT']})\"\n",
    "\n",
    "df_1['CALCULATEUR_Detailed'] = df_1.apply(create_compname_detailed, axis=1)\n",
    "\n",
    "# Step 5: Create a column that counts the number of defects for each VIN\n",
    "df_1['Defect_Count'] = df_1.groupby('VIN')['VIN'].transform('count')\n",
    "\n",
    "# Step 6: Group by VIN and aggregate COMPNAME_Detailed with a ' + ' separator\n",
    "df_final = df_1.groupby('VIN').agg({\n",
    "    'CALCULATEUR_Detailed': ' + '.join,\n",
    "    'Defect_Count': 'first'  # Use 'first' since the Defect_Count is the same for all rows of a VIN\n",
    "}).reset_index()\n",
    "\n",
    "# Step 7: Display the final DataFrame\n",
    "df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_Detailed</th>\n",
       "      <th>Defect_Count</th>\n",
       "      <th>Most_recurrent_problem</th>\n",
       "      <th>BCM_Occurrences</th>\n",
       "      <th>Max_BCM_problem_count</th>\n",
       "      <th>BCM_to_total_defects_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VF1EL000071107078</td>\n",
       "      <td>USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...</td>\n",
       "      <td>19</td>\n",
       "      <td>SONAR</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VF1EL000071182833</td>\n",
       "      <td>BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...</td>\n",
       "      <td>13</td>\n",
       "      <td>BCM</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>0.615385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1EL000170966766</td>\n",
       "      <td>BCM (FEU STOP) + BCM (FEU STOP)</td>\n",
       "      <td>2</td>\n",
       "      <td>BCM</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1EL000370756198</td>\n",
       "      <td>SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...</td>\n",
       "      <td>2</td>\n",
       "      <td>SONAR</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1EL000371117068</td>\n",
       "      <td>ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...</td>\n",
       "      <td>4</td>\n",
       "      <td>ECM</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>VNVJ4000170746812</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>96</td>\n",
       "      <td>BCM</td>\n",
       "      <td>29</td>\n",
       "      <td>4</td>\n",
       "      <td>0.302083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>VNVJ4000471449608</td>\n",
       "      <td>TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...</td>\n",
       "      <td>16</td>\n",
       "      <td>HFM</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.125000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>VNVJ4000571449049</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>101</td>\n",
       "      <td>BCM</td>\n",
       "      <td>51</td>\n",
       "      <td>5</td>\n",
       "      <td>0.504950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>VNVJ4000970976808</td>\n",
       "      <td>BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...</td>\n",
       "      <td>4</td>\n",
       "      <td>BCM</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>VNVJ4000X71239594</td>\n",
       "      <td>ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...</td>\n",
       "      <td>39</td>\n",
       "      <td>METER</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.102564</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_Detailed  \\\n",
       "0    VF1EL000071107078  USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...   \n",
       "1    VF1EL000071182833  BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...   \n",
       "2    VF1EL000170966766                    BCM (FEU STOP) + BCM (FEU STOP)   \n",
       "3    VF1EL000370756198  SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...   \n",
       "4    VF1EL000371117068  ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...   \n",
       "..                 ...                                                ...   \n",
       "397  VNVJ4000170746812  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "398  VNVJ4000471449608  TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...   \n",
       "399  VNVJ4000571449049  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "400  VNVJ4000970976808  BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...   \n",
       "401  VNVJ4000X71239594  ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...   \n",
       "\n",
       "     Defect_Count Most_recurrent_problem  BCM_Occurrences  \\\n",
       "0              19                  SONAR                0   \n",
       "1              13                    BCM                8   \n",
       "2               2                    BCM                2   \n",
       "3               2                  SONAR                1   \n",
       "4               4                    ECM                1   \n",
       "..            ...                    ...              ...   \n",
       "397            96                    BCM               29   \n",
       "398            16                    HFM                2   \n",
       "399           101                    BCM               51   \n",
       "400             4                    BCM                4   \n",
       "401            39                  METER                4   \n",
       "\n",
       "     Max_BCM_problem_count  BCM_to_total_defects_ratio  \n",
       "0                        0                    0.000000  \n",
       "1                        2                    0.615385  \n",
       "2                        2                    1.000000  \n",
       "3                        1                    0.500000  \n",
       "4                        1                    0.250000  \n",
       "..                     ...                         ...  \n",
       "397                      4                    0.302083  \n",
       "398                      1                    0.125000  \n",
       "399                      5                    0.504950  \n",
       "400                      3                    1.000000  \n",
       "401                      1                    0.102564  \n",
       "\n",
       "[402 rows x 7 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 1: Most recurrent problem (count the most frequent COMPNAME for each VIN in df_1)\n",
    "def most_recurrent_problem(vin):\n",
    "    # Filter df_1 for the specific VIN\n",
    "    vin_data = df_1[df_1['VIN'] == vin]\n",
    "    # Find the most frequent CALCULATEUR\n",
    "    most_common = vin_data['CALCULATEUR'].value_counts().idxmax()\n",
    "    return most_common\n",
    "\n",
    "df_final['Most_recurrent_problem'] = df_final['VIN'].apply(most_recurrent_problem)\n",
    "\n",
    "# Step 2: Number of occurrences of BCM in CALCULATEUR_Detailed\n",
    "df_final['BCM_Occurrences'] = df_final['CALCULATEUR_Detailed'].apply(lambda x: x.count('BCM'))\n",
    "\n",
    "# Step 3: Number of occurrences of the same BCM problem (find max occurrences of TYPE_DEFAUT for BCM)\n",
    "def max_bcm_defaut_count(vin):\n",
    "    # Filter df_1 for the specific VIN and for rows where CALCULATEUR contains 'BCM'\n",
    "    vin_data_bcm = df_1[(df_1['VIN'] == vin) & (df_1['CALCULATEUR'].str.contains('BCM'))]\n",
    "    if not vin_data_bcm.empty:\n",
    "        # Count occurrences of each TYPE_DEFAUT related to BCM\n",
    "        max_bcm_defaut = vin_data_bcm['TYPE_DEFAUT'].value_counts().max()\n",
    "        return max_bcm_defaut\n",
    "    return 0  # If there are no BCM problems\n",
    "\n",
    "df_final['Max_BCM_problem_count'] = df_final['VIN'].apply(max_bcm_defaut_count)\n",
    "\n",
    "# Step 4: Ratio of number of BCMs per total defects\n",
    "df_final['BCM_to_total_defects_ratio'] = df_final['BCM_Occurrences'] / df_final['Defect_Count']\n",
    "\n",
    "# Step 5: Display the final DataFrame with new features\n",
    "df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_Detailed</th>\n",
       "      <th>Defect_Count</th>\n",
       "      <th>Most_recurrent_problem</th>\n",
       "      <th>BCM_Occurrences</th>\n",
       "      <th>Max_BCM_problem_count</th>\n",
       "      <th>BCM_to_total_defects_ratio</th>\n",
       "      <th>AT_RISK</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VF1EL000071107078</td>\n",
       "      <td>USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...</td>\n",
       "      <td>19</td>\n",
       "      <td>SONAR</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VF1EL000071182833</td>\n",
       "      <td>BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...</td>\n",
       "      <td>13</td>\n",
       "      <td>BCM</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1EL000170966766</td>\n",
       "      <td>BCM (FEU STOP) + BCM (FEU STOP)</td>\n",
       "      <td>2</td>\n",
       "      <td>BCM</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1EL000370756198</td>\n",
       "      <td>SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...</td>\n",
       "      <td>2</td>\n",
       "      <td>SONAR</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1EL000371117068</td>\n",
       "      <td>ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...</td>\n",
       "      <td>4</td>\n",
       "      <td>ECM</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>VNVJ4000170746812</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>96</td>\n",
       "      <td>BCM</td>\n",
       "      <td>29</td>\n",
       "      <td>4</td>\n",
       "      <td>0.302083</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>VNVJ4000471449608</td>\n",
       "      <td>TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...</td>\n",
       "      <td>16</td>\n",
       "      <td>HFM</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>VNVJ4000571449049</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>101</td>\n",
       "      <td>BCM</td>\n",
       "      <td>51</td>\n",
       "      <td>5</td>\n",
       "      <td>0.504950</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>VNVJ4000970976808</td>\n",
       "      <td>BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...</td>\n",
       "      <td>4</td>\n",
       "      <td>BCM</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>VNVJ4000X71239594</td>\n",
       "      <td>ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...</td>\n",
       "      <td>39</td>\n",
       "      <td>METER</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_Detailed  \\\n",
       "0    VF1EL000071107078  USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...   \n",
       "1    VF1EL000071182833  BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...   \n",
       "2    VF1EL000170966766                    BCM (FEU STOP) + BCM (FEU STOP)   \n",
       "3    VF1EL000370756198  SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...   \n",
       "4    VF1EL000371117068  ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...   \n",
       "..                 ...                                                ...   \n",
       "397  VNVJ4000170746812  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "398  VNVJ4000471449608  TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...   \n",
       "399  VNVJ4000571449049  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "400  VNVJ4000970976808  BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...   \n",
       "401  VNVJ4000X71239594  ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...   \n",
       "\n",
       "     Defect_Count Most_recurrent_problem  BCM_Occurrences  \\\n",
       "0              19                  SONAR                0   \n",
       "1              13                    BCM                8   \n",
       "2               2                    BCM                2   \n",
       "3               2                  SONAR                1   \n",
       "4               4                    ECM                1   \n",
       "..            ...                    ...              ...   \n",
       "397            96                    BCM               29   \n",
       "398            16                    HFM                2   \n",
       "399           101                    BCM               51   \n",
       "400             4                    BCM                4   \n",
       "401            39                  METER                4   \n",
       "\n",
       "     Max_BCM_problem_count  BCM_to_total_defects_ratio  AT_RISK  \n",
       "0                        0                    0.000000        0  \n",
       "1                        2                    0.615385        0  \n",
       "2                        2                    1.000000        0  \n",
       "3                        1                    0.500000        0  \n",
       "4                        1                    0.250000        0  \n",
       "..                     ...                         ...      ...  \n",
       "397                      4                    0.302083        0  \n",
       "398                      1                    0.125000        0  \n",
       "399                      5                    0.504950        0  \n",
       "400                      3                    1.000000        0  \n",
       "401                      1                    0.102564        0  \n",
       "\n",
       "[402 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 1: Let's label our dataframe with the 'AT_RISK' column\n",
    "df_final['AT_RISK'] = df_final['VIN'].isin(df_merged_ams96['VIN']).astype(int)\n",
    "\n",
    "# Step 2: Display the updated DataFrame\n",
    "df_final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Final 2 numerical variables to add"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>CALCULATEUR_Detailed</th>\n",
       "      <th>Defect_Count</th>\n",
       "      <th>Most_recurrent_problem</th>\n",
       "      <th>BCM_Occurrences</th>\n",
       "      <th>Max_BCM_problem_count</th>\n",
       "      <th>BCM_to_total_defects_ratio</th>\n",
       "      <th>AT_RISK</th>\n",
       "      <th>Ratio_DTC_per_BCM</th>\n",
       "      <th>Total_Ratio_DTC_per_Defects</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VF1EL000071107078</td>\n",
       "      <td>USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...</td>\n",
       "      <td>19</td>\n",
       "      <td>SONAR</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.894737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VF1EL000071182833</td>\n",
       "      <td>BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...</td>\n",
       "      <td>13</td>\n",
       "      <td>BCM</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.307692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VF1EL000170966766</td>\n",
       "      <td>BCM (FEU STOP) + BCM (FEU STOP)</td>\n",
       "      <td>2</td>\n",
       "      <td>BCM</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VF1EL000370756198</td>\n",
       "      <td>SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...</td>\n",
       "      <td>2</td>\n",
       "      <td>SONAR</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VF1EL000371117068</td>\n",
       "      <td>ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...</td>\n",
       "      <td>4</td>\n",
       "      <td>ECM</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>VNVJ4000170746812</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>96</td>\n",
       "      <td>BCM</td>\n",
       "      <td>29</td>\n",
       "      <td>4</td>\n",
       "      <td>0.302083</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.281250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>VNVJ4000471449608</td>\n",
       "      <td>TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...</td>\n",
       "      <td>16</td>\n",
       "      <td>HFM</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>VNVJ4000571449049</td>\n",
       "      <td>UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...</td>\n",
       "      <td>101</td>\n",
       "      <td>BCM</td>\n",
       "      <td>51</td>\n",
       "      <td>5</td>\n",
       "      <td>0.504950</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.019802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>VNVJ4000970976808</td>\n",
       "      <td>BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...</td>\n",
       "      <td>4</td>\n",
       "      <td>BCM</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>VNVJ4000X71239594</td>\n",
       "      <td>ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...</td>\n",
       "      <td>39</td>\n",
       "      <td>METER</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.307692</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   VIN                               CALCULATEUR_Detailed  \\\n",
       "0    VF1EL000071107078  USM (ANTI-BROUILLARD AV) + SONAR (DTC) + METER...   \n",
       "1    VF1EL000071182833  BCM (PORTE PSG) + BCM (LEVE-VITRE AV PSG) + BC...   \n",
       "2    VF1EL000170966766                    BCM (FEU STOP) + BCM (FEU STOP)   \n",
       "3    VF1EL000370756198  SONAR (CONFIGURATION AUTOMATIQUE) + BCM (APC N...   \n",
       "4    VF1EL000371117068  ECM (DTC) + ECM (DTC) + BCM (RETROVISEUR PSG) ...   \n",
       "..                 ...                                                ...   \n",
       "397  VNVJ4000170746812  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "398  VNVJ4000471449608  TPMS (PRESSION ROUE AR D) + TPMS (PRESSION ROU...   \n",
       "399  VNVJ4000571449049  UDM (ETAT REMPLISSAGE NOK) + UDM (ETAT REMPLIS...   \n",
       "400  VNVJ4000970976808  BCM (PORTE AR COND) + BCM (PORTE AR COND) + BC...   \n",
       "401  VNVJ4000X71239594  ECM (PEDALE EMBRAYAGE NON RELACHE) + ECM (PAS ...   \n",
       "\n",
       "     Defect_Count Most_recurrent_problem  BCM_Occurrences  \\\n",
       "0              19                  SONAR                0   \n",
       "1              13                    BCM                8   \n",
       "2               2                    BCM                2   \n",
       "3               2                  SONAR                1   \n",
       "4               4                    ECM                1   \n",
       "..            ...                    ...              ...   \n",
       "397            96                    BCM               29   \n",
       "398            16                    HFM                2   \n",
       "399           101                    BCM               51   \n",
       "400             4                    BCM                4   \n",
       "401            39                  METER                4   \n",
       "\n",
       "     Max_BCM_problem_count  BCM_to_total_defects_ratio  AT_RISK  \\\n",
       "0                        0                    0.000000        0   \n",
       "1                        2                    0.615385        0   \n",
       "2                        2                    1.000000        0   \n",
       "3                        1                    0.500000        0   \n",
       "4                        1                    0.250000        0   \n",
       "..                     ...                         ...      ...   \n",
       "397                      4                    0.302083        0   \n",
       "398                      1                    0.125000        0   \n",
       "399                      5                    0.504950        0   \n",
       "400                      3                    1.000000        0   \n",
       "401                      1                    0.102564        0   \n",
       "\n",
       "     Ratio_DTC_per_BCM  Total_Ratio_DTC_per_Defects  \n",
       "0                  0.0                     0.894737  \n",
       "1                  0.0                     0.307692  \n",
       "2                  0.0                     0.000000  \n",
       "3                  0.0                     0.000000  \n",
       "4                  0.0                     0.750000  \n",
       "..                 ...                          ...  \n",
       "397                0.0                     0.281250  \n",
       "398                0.0                     0.250000  \n",
       "399                0.0                     0.019802  \n",
       "400                0.0                     0.000000  \n",
       "401                0.0                     0.307692  \n",
       "\n",
       "[402 rows x 10 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 1: Calculate ratio of DTC per BCM for each VIN\n",
    "def calculate_dtc_per_bcm(vin):\n",
    "    # Filter df_SIDIS for the current VIN and where COMPNAME is 'BCM'\n",
    "    df_vin_bcm = df_1[(df_1['VIN'] == vin) & (df_1['CALCULATEUR'] == 'BCM')]\n",
    "    \n",
    "    # Count how many of those rows have 'DTC' in 'DEFAUT_L1'\n",
    "    dtc_count = df_vin_bcm[df_vin_bcm['TYPE_DEFAUT'] == 'DTC'].shape[0]\n",
    "    \n",
    "    # Total number of BCM entries for this VIN\n",
    "    bcm_count = df_vin_bcm.shape[0]\n",
    "    \n",
    "    # Calculate the ratio, handling division by zero\n",
    "    if bcm_count == 0:\n",
    "        return 0  # If there are no BCM occurrences, return 0\n",
    "    return dtc_count / bcm_count  # Return the ratio of DTCs per BCM\n",
    "\n",
    "# Step 2: Calculate total ratio of DTC per defects for each VIN\n",
    "def calculate_dtc_per_defects(vin):\n",
    "    # Filter df_SIDIS for the current VIN\n",
    "    df_vin = df_1[df_1['VIN'] == vin]\n",
    "    \n",
    "    # Count how many rows have 'DTC' in 'DEFAUT_L1'\n",
    "    dtc_count = df_vin[df_vin['TYPE_DEFAUT'] == 'DTC'].shape[0]\n",
    "    \n",
    "    # Total number of defects (i.e., total rows for this VIN)\n",
    "    total_defects = df_vin.shape[0]\n",
    "    \n",
    "    # Calculate the ratio, handling division by zero\n",
    "    if total_defects == 0:\n",
    "        return 0  # If there are no defects, return 0\n",
    "    return dtc_count / total_defects  # Return the ratio of DTCs per total defects\n",
    "\n",
    "# Step 3: Apply the functions to df_final\n",
    "# Create 'Ratio_DTC_per_BCM' by applying the function to each VIN in df_final\n",
    "df_final['Ratio_DTC_per_BCM'] = df_final['VIN'].apply(calculate_dtc_per_bcm)\n",
    "\n",
    "# Create 'Total_Ratio_DTC_per_Defects' by applying the function to each VIN in df_final\n",
    "df_final['Total_Ratio_DTC_per_Defects'] = df_final['VIN'].apply(calculate_dtc_per_defects)\n",
    "\n",
    "df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: One-hot encode the 'Most_recurrent_problem'\n",
    "df_encoded = pd.get_dummies(df_final['Most_recurrent_problem'], prefix='Problem')\n",
    "\n",
    "# Step 2: Combine the one-hot encoded columns with the other relevant numeric features\n",
    "df_for_corr = pd.concat([df_final[['Defect_Count', 'BCM_Occurrences', 'Max_BCM_problem_count', \n",
    "                                   'BCM_to_total_defects_ratio','AT_RISK', 'Ratio_DTC_per_BCM', 'Total_Ratio_DTC_per_Defects']], df_encoded['Problem_BCM']], axis=1)\n",
    "\n",
    "# Step 3: Calculate the correlation matrix\n",
    "correlation_matrix = df_for_corr.corr()\n",
    "\n",
    "# Step 4: Plot the heatmap\n",
    "plt.figure(figsize=(12, 10))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n",
    "plt.title('Correlation Matrix with One-hot Encoded Most Recurrent Problem')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Lenovo Gaming\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\xgboost\\core.py:158: UserWarning: [14:14:25] WARNING: C:\\buildkite-agent\\builds\\buildkite-windows-cpu-autoscaling-group-i-0015a694724fa8361-1\\xgboost\\xgboost-ci-windows\\src\\learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.95      0.88        95\n",
      "           1       0.55      0.23      0.32        26\n",
      "\n",
      "    accuracy                           0.79       121\n",
      "   macro avg       0.68      0.59      0.60       121\n",
      "weighted avg       0.76      0.79      0.76       121\n",
      "\n",
      "Random Forest Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.93      0.90        95\n",
      "           1       0.65      0.50      0.57        26\n",
      "\n",
      "    accuracy                           0.83       121\n",
      "   macro avg       0.76      0.71      0.73       121\n",
      "weighted avg       0.82      0.83      0.83       121\n",
      "\n",
      "XGBoost Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.83      0.84        95\n",
      "           1       0.45      0.50      0.47        26\n",
      "\n",
      "    accuracy                           0.76       121\n",
      "   macro avg       0.65      0.67      0.66       121\n",
      "weighted avg       0.77      0.76      0.76       121\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import confusion_matrix, classification_report, ConfusionMatrixDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Prepare the data\n",
    "# We'll drop the non-numeric 'COMPNAME_Detailed' and the 'VIN' columns from the features\n",
    "features = df_final.drop(columns=['VIN', 'CALCULATEUR_Detailed','Most_recurrent_problem', 'AT_RISK'])\n",
    "target = df_final['AT_RISK']\n",
    "\n",
    "# Split the data into training and testing sets (70% train, 30% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)\n",
    "\n",
    "# Scale the data (for Logistic Regression)\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Step 2: Train Logistic Regression\n",
    "logreg = LogisticRegression(max_iter=1000)\n",
    "logreg.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Step 3: Train Random Forest\n",
    "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# Step 4: Train XGBoost\n",
    "xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
    "xgb.fit(X_train, y_train)\n",
    "\n",
    "# Step 5: Make predictions and display confusion matrices\n",
    "\n",
    "# Logistic Regression Confusion Matrix\n",
    "y_pred_logreg = logreg.predict(X_test_scaled)\n",
    "cm_logreg = confusion_matrix(y_test, y_pred_logreg)\n",
    "ConfusionMatrixDisplay(cm_logreg).plot()\n",
    "plt.title('Logistic Regression Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Random Forest Confusion Matrix\n",
    "y_pred_rf = rf.predict(X_test)\n",
    "cm_rf = confusion_matrix(y_test, y_pred_rf)\n",
    "ConfusionMatrixDisplay(cm_rf).plot()\n",
    "plt.title('Random Forest Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# XGBoost Confusion Matrix\n",
    "y_pred_xgb = xgb.predict(X_test)\n",
    "cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n",
    "ConfusionMatrixDisplay(cm_xgb).plot()\n",
    "plt.title('XGBoost Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Step 6: Classification reports for each model (optional)\n",
    "print(\"Logistic Regression Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_logreg))\n",
    "\n",
    "print(\"Random Forest Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_rf))\n",
    "\n",
    "print(\"XGBoost Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_xgb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 108 candidates, totalling 540 fits\n",
      "Best Parameters:  {'max_depth': 30, 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}\n",
      "Accuracy of the best model:  0.8099173553719008\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier  # Replace with your model\n",
    "\n",
    "# Assuming you have already loaded your data\n",
    "# X_train, y_train\n",
    "\n",
    "# Define the model you want to optimize\n",
    "model = RandomForestClassifier()\n",
    "\n",
    "# Define the parameter grid (replace with relevant parameters for your model)\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 150],\n",
    "    'max_depth': [None, 10, 20, 30],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Create a GridSearchCV object\n",
    "grid_search = GridSearchCV(estimator=model, param_grid=param_grid,\n",
    "                           cv=5, n_jobs=-1, verbose=2, scoring='accuracy')\n",
    "\n",
    "# Fit the GridSearchCV to your training data\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Print out the best parameters\n",
    "print(\"Best Parameters: \", grid_search.best_params_)\n",
    "\n",
    "# Use the best estimator for predictions\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred = best_model.predict(X_test)  # Assuming X_test is your test set\n",
    "\n",
    "# Evaluate the best model\n",
    "from sklearn.metrics import accuracy_score\n",
    "accuracy = accuracy_score(y_test, y_pred)  # Assuming y_test is your true labels for test set\n",
    "print(\"Accuracy of the best model: \", accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.92      0.88        95\n",
      "           1       0.58      0.42      0.49        26\n",
      "\n",
      "    accuracy                           0.81       121\n",
      "   macro avg       0.72      0.67      0.69       121\n",
      "weighted avg       0.79      0.81      0.80       121\n",
      "\n",
      "Confusion Matrix:\n",
      "[[87  8]\n",
      " [15 11]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Classification report\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Confusion Matrix\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "feature_importances = best_model.feature_importances_\n",
    "features = X_train.columns if hasattr(X_train, 'columns') else range(X_train.shape[1])\n",
    "importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})\n",
    "importance_df.sort_values(by='Importance', ascending=False, inplace=True)\n",
    "\n",
    "# Plot feature importances\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(importance_df['Feature'], importance_df['Importance'])\n",
    "plt.xlabel('Feature')\n",
    "plt.ylabel('Importance')\n",
    "plt.title('Feature Importance')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 100 candidates, totalling 500 fits\n",
      "Best Parameters (Randomized Search):  {'n_estimators': 130, 'min_samples_split': 2, 'min_samples_leaf': 8, 'max_depth': 20}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "import numpy as np\n",
    "\n",
    "# Updated parameter grid with more values or ranges\n",
    "param_grid = {\n",
    "    'n_estimators': np.arange(10, 200, 20),\n",
    "    'max_depth': [None, 10, 20, 30, 40, 50],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4, 6, 8]\n",
    "}\n",
    "\n",
    "# RandomizedSearchCV\n",
    "random_search = RandomizedSearchCV(estimator=model, param_distributions=param_grid,\n",
    "                                   n_iter=100, cv=5, n_jobs=-1, verbose=2, scoring='accuracy')\n",
    "\n",
    "random_search.fit(X_train, y_train)\n",
    "print(\"Best Parameters (Randomized Search): \", random_search.best_params_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the new model:  0.8099173553719008\n",
      "\n",
      "Classification Report for the New Model:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.92      0.88        95\n",
      "           1       0.58      0.42      0.49        26\n",
      "\n",
      "    accuracy                           0.81       121\n",
      "   macro avg       0.72      0.67      0.69       121\n",
      "weighted avg       0.79      0.81      0.80       121\n",
      "\n",
      "\n",
      "Confusion Matrix for the New Model:\n",
      "[[87  8]\n",
      " [15 11]]\n"
     ]
    }
   ],
   "source": [
    "# Train the new model with the new parameters\n",
    "new_model = RandomForestClassifier(n_estimators=130, max_depth=20, \n",
    "                                   min_samples_split=2, min_samples_leaf=8, random_state=42)\n",
    "\n",
    "# Fit the new model to training data\n",
    "new_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict and evaluate\n",
    "y_pred_new = new_model.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "# Calculate accuracy\n",
    "new_accuracy = accuracy_score(y_test, y_pred_new)\n",
    "print(\"Accuracy of the new model: \", new_accuracy)\n",
    "\n",
    "# Classification report\n",
    "print(\"\\nClassification Report for the New Model:\")\n",
    "print(classification_report(y_test, y_pred_new))\n",
    "\n",
    "# Confusion Matrix\n",
    "print(\"\\nConfusion Matrix for the New Model:\")\n",
    "print(confusion_matrix(y_test, y_pred_new))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation Accuracy Scores for the New Model:  [0.68965517 0.64285714 0.71428571 0.75       0.75       0.71428571\n",
      " 0.78571429 0.78571429 0.75       0.75      ]\n",
      "Mean Cross-Validation Accuracy for the New Model:  0.7332512315270936\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Perform cross-validation on the new model\n",
    "cross_val_acc_new = cross_val_score(new_model, X_train, y_train, cv=10, scoring='accuracy')\n",
    "print(\"Cross-Validation Accuracy Scores for the New Model: \", cross_val_acc_new)\n",
    "print(\"Mean Cross-Validation Accuracy for the New Model: \", cross_val_acc_new.mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After testing different hyperparameter combinations for our RandomForest model, we found that the previous set of parameters (max_depth: 30, min_samples_leaf: 4, min_samples_split: 2, n_estimators: 50) outperformed the new set (max_depth: 20, min_samples_leaf: 8, etc.) in terms of cross-validation accuracy. Specifically, the mean accuracy of the new model was approximately 73.3%, which is notably lower compared to the previous modelâ€™s performance of about 81%. This suggests that the newer configuration might not generalize as well, potentially leading to reduced predictive power. The variability in cross-validation scores for the new model also indicates it might be less stable across different data splits. Based on this analysis, the previous model appears to be the better choice, providing a good balance of accuracy and consistency. We can further fine-tune or evaluate other metrics, but for now, sticking with the earlier hyperparameters is likely the most effective option."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
